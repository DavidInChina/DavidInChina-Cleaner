apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.wechat.files.cleaner"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        flavorDimensions "versionCode"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    signingConfigs {
        wechatclean {
            storeFile file('wechatcleansign')
            storePassword 'wechat123'
            keyAlias 'wechat'
            keyPassword 'wechat123'
        }
    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    productFlavors {
        ppclean {
            signingConfig signingConfigs.wechatclean
            applicationId "com.wechat.files.cleaner"
            versionCode 1
            versionName "1.0.0"
            buildConfigField "String", "UMENG_ID", "\"\""
            buildConfigField "String", "PRIVACY_URL", "\"\""
            buildConfigField "String", "EMAIL_US_ADDRESS", "\"\""
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            signingConfig release.signingConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig release.signingConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->

            variant.outputs.all { output ->
                def projectName = variant.productFlavors[0].name
                if (variant.buildType.name == 'release') {
                    def releaseApkName = projectName + "_v" + variant.productFlavors[0].versionName +
                            '_wechatclean_release' + "_" + getDate() + '.apk'
                    outputFileName = new File('../release', releaseApkName)
                }
                if (variant.buildType.name == 'beta') {
                }
                if (variant.buildType.name == 'debug') {
                    def debugApkName = projectName + variant.productFlavors[0].versionName +
                            '_wechatclean_debug' + '.apk'
                    outputFileName = new File('../debug', debugApkName)
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.jakewharton:butterknife:8.8.1'
    implementation "com.android.support:preference-v14:$rootProject.supportLibVersion"
    //permission dispatcher
    implementation "com.github.hotchemi:permissionsdispatcher:$rootProject.permission_dispatcher_version"
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:$rootProject.permission_dispatcher_version"
    implementation 'com.thoughtbot:expandablecheckrecyclerview:1.4'
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibVersion"
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation "com.android.support:support-v4:$rootProject.supportLibVersion"
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.android.support:design:$rootProject.supportLibVersion"
    implementation 'com.jaeger.statusbarutil:library:1.5.1'
}
configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            // Force all of the primary support libraries to use the same version.
            if (details.requested.group == 'com.android.support'
                    && details.requested.name != 'multidex'
                    && details.requested.name != 'multidex-instrumentation') {
                details.useVersion rootProject.supportLibVersion
            }
        }
    }
}